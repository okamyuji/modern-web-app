package templates

import (
	"fmt"
	"time"
	"todo-app/internal/models"
)

templ TodoList(todos []models.Todo) {
	if len(todos) == 0 {
		<div class="text-center py-12">
			<div class="text-gray-400 dark:text-gray-500 text-6xl mb-4">📝</div>
			<h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">タスクがありません</h3>
			<p class="text-gray-500 dark:text-gray-400">新しいタスクを追加して始めましょう！</p>
		</div>
	} else {
		for _, todo := range todos {
			@TodoItem(todo)
		}
	}
}

templ TodoItem(todo models.Todo) {
	<div 
		class={ "bg-white dark:bg-gray-800 rounded-lg shadow-sm border transition-all duration-200 hover:shadow-md", 
			templ.KV("border-gray-200 dark:border-gray-700", !todo.Completed),
			templ.KV("border-green-200 dark:border-green-700 bg-green-50 dark:bg-green-900", todo.Completed),
			templ.KV("border-l-4 border-l-red-500", isOverdue(todo)) }
		id={ fmt.Sprintf("todo-%d", todo.ID) }
	>
		<div class="p-4">
			<div class="flex items-start space-x-3">
				<!-- チェックボックス -->
				<button
					hx-patch={ fmt.Sprintf("/todos/%d/toggle", todo.ID) }
					hx-target={ fmt.Sprintf("#todo-%d", todo.ID) }
					hx-swap="outerHTML"
					class="mt-1 flex-shrink-0"
				>
					if todo.Completed {
						<div class="w-5 h-5 bg-green-500 border-2 border-green-500 rounded flex items-center justify-center">
							<svg class="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
							</svg>
						</div>
					} else {
						<div class="w-5 h-5 border-2 border-gray-300 dark:border-gray-600 rounded hover:border-gray-400 dark:hover:border-gray-500 transition-colors"></div>
					}
				</button>
				
				<!-- タスク内容 -->
				<div class="flex-1 min-w-0">
					<div class="flex items-start justify-between">
						<div class="flex-1">
							<h3 class={ "font-medium", templ.KV("text-gray-900 dark:text-white", !todo.Completed), templ.KV("text-gray-500 dark:text-gray-400 line-through", todo.Completed) }>
								{ todo.Title }
							</h3>
							if todo.Description != "" {
								<p class={ "mt-1 text-sm", templ.KV("text-gray-600 dark:text-gray-300", !todo.Completed), templ.KV("text-gray-400 dark:text-gray-500", todo.Completed) }>
									{ todo.Description }
								</p>
							}
						</div>
						
						<!-- 優先度バッジ -->
						<div class="flex items-center space-x-2 ml-4">
							@PriorityBadge(todo.Priority)
							@DueDateBadge(todo.DueDate, todo.Completed)
						</div>
					</div>
					
					<!-- メタ情報 -->
					<div class="mt-3 flex items-center justify-between text-xs text-gray-500 dark:text-gray-400">
						<span>作成: { todo.CreatedAt.Format("2006/01/02 15:04") }</span>
						<div class="flex space-x-2">
							<!-- 編集ボタン -->
							<button
								hx-get={ fmt.Sprintf("/todos/%d/edit", todo.ID) }
								hx-target={ fmt.Sprintf("#todo-%d", todo.ID) }
								hx-swap="outerHTML"
								class="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition-colors"
							>
								編集
							</button>
							<!-- 削除ボタン -->
							<button
								hx-delete={ fmt.Sprintf("/todos/%d", todo.ID) }
								hx-target={ fmt.Sprintf("#todo-%d", todo.ID) }
								hx-swap="outerHTML"
								hx-confirm="このタスクを削除しますか？"
								class="text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300 transition-colors"
							>
								削除
							</button>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ TodoEditForm(todo models.Todo) {
	<div 
		class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700"
		id={ fmt.Sprintf("todo-%d", todo.ID) }
	>
		<form 
			hx-put={ fmt.Sprintf("/todos/%d", todo.ID) }
			hx-target={ fmt.Sprintf("#todo-%d", todo.ID) }
			hx-swap="outerHTML"
			class="p-4"
		>
			<div class="space-y-4">
				<div>
					<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
						タイトル <span class="text-red-500">*</span>
					</label>
					<input 
						type="text" 
						name="title" 
						value={ todo.Title }
						required
						class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white transition-colors"
					/>
				</div>
				
				<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
					<div>
						<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
							優先度
						</label>
						<select 
							name="priority"
							class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white transition-colors"
						>
							<option value="low" selected?={ todo.Priority == "low" }>低</option>
							<option value="medium" selected?={ todo.Priority == "medium" }>中</option>
							<option value="high" selected?={ todo.Priority == "high" }>高</option>
						</select>
					</div>
					
					<div>
						<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
							期限
						</label>
						<input 
							type="date" 
							name="due_date"
							value={ formatDateForInput(todo.DueDate) }
							class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white transition-colors"
						/>
					</div>
				</div>
				
				<div>
					<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
						説明
					</label>
					<textarea 
						name="description"
						rows="3"
						class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white transition-colors"
					>{ todo.Description }</textarea>
				</div>
				
				<div class="flex justify-end space-x-2">
					<button 
						type="button"
						hx-get={ fmt.Sprintf("/todos/%d", todo.ID) }
						hx-target={ fmt.Sprintf("#todo-%d", todo.ID) }
						hx-swap="outerHTML"
						class="px-4 py-2 bg-gray-300 dark:bg-gray-600 text-gray-700 dark:text-gray-300 rounded hover:bg-gray-400 dark:hover:bg-gray-500 transition-colors"
					>
						キャンセル
					</button>
					<button 
						type="submit"
						class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
					>
						保存
					</button>
				</div>
			</div>
		</form>
	</div>
}

templ PriorityBadge(priority string) {
	switch priority {
	case "high":
		<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200">
			高
		</span>
	case "medium":
		<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200">
			中
		</span>
	case "low":
		<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200">
			低
		</span>
	}
}

templ DueDateBadge(dueDate *time.Time, completed bool) {
	if dueDate != nil {
		if completed {
			<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400">
				{ dueDate.Format("01/02") }
			</span>
		} else if dueDate.Before(time.Now()) {
			<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200">
				期限切れ
			</span>
		} else if dueDate.Before(time.Now().AddDate(0, 0, 3)) {
			<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-orange-100 dark:bg-orange-900 text-orange-800 dark:text-orange-200">
				{ dueDate.Format("01/02") }
			</span>
		} else {
			<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200">
				{ dueDate.Format("01/02") }
			</span>
		}
	}
}

func isOverdue(todo models.Todo) bool {
	return todo.DueDate != nil && todo.DueDate.Before(time.Now()) && !todo.Completed
}

func formatDateForInput(dueDate *time.Time) string {
	if dueDate == nil {
		return ""
	}
	return dueDate.Format("2006-01-02")
}